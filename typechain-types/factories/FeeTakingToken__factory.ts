/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  FeeTakingToken,
  FeeTakingTokenInterface,
} from "../FeeTakingToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "FEE_PERCENT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b2038038062001b208339818101604052810190620000379190620002f7565b8360009081620000489190620005e8565b5082600190816200005a9190620005e8565b5081600260006101000a81548160ff021916908360ff1602179055508160ff16600a62000088919062000852565b81620000959190620008a3565b600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050620008ee565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001548262000109565b810181811067ffffffffffffffff821117156200017657620001756200011a565b5b80604052505050565b60006200018b620000eb565b905062000199828262000149565b919050565b600067ffffffffffffffff821115620001bc57620001bb6200011a565b5b620001c78262000109565b9050602081019050919050565b60005b83811015620001f4578082015181840152602081019050620001d7565b60008484015250505050565b60006200021762000211846200019e565b6200017f565b90508281526020810184848401111562000236576200023562000104565b5b62000243848285620001d4565b509392505050565b600082601f830112620002635762000262620000ff565b5b81516200027584826020860162000200565b91505092915050565b600060ff82169050919050565b62000296816200027e565b8114620002a257600080fd5b50565b600081519050620002b6816200028b565b92915050565b6000819050919050565b620002d181620002bc565b8114620002dd57600080fd5b50565b600081519050620002f181620002c6565b92915050565b60008060008060808587031215620003145762000313620000f5565b5b600085015167ffffffffffffffff811115620003355762000334620000fa565b5b62000343878288016200024b565b945050602085015167ffffffffffffffff811115620003675762000366620000fa565b5b62000375878288016200024b565b93505060406200038887828801620002a5565b92505060606200039b87828801620002e0565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003fa57607f821691505b60208210810362000410576200040f620003b2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200047a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200043b565b6200048686836200043b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004c9620004c3620004bd84620002bc565b6200049e565b620002bc565b9050919050565b6000819050919050565b620004e583620004a8565b620004fd620004f482620004d0565b84845462000448565b825550505050565b600090565b6200051462000505565b62000521818484620004da565b505050565b5b8181101562000549576200053d6000826200050a565b60018101905062000527565b5050565b601f8211156200059857620005628162000416565b6200056d846200042b565b810160208510156200057d578190505b620005956200058c856200042b565b83018262000526565b50505b505050565b600082821c905092915050565b6000620005bd600019846008026200059d565b1980831691505092915050565b6000620005d88383620005aa565b9150826002028217905092915050565b620005f382620003a7565b67ffffffffffffffff8111156200060f576200060e6200011a565b5b6200061b8254620003e1565b620006288282856200054d565b600060209050601f8311600181146200066057600084156200064b578287015190505b620006578582620005ca565b865550620006c7565b601f198416620006708662000416565b60005b828110156200069a5784890151825560018201915060208501945060208101905062000673565b86831015620006ba5784890151620006b6601f891682620005aa565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200075d57808604811115620007355762000734620006cf565b5b6001851615620007455780820291505b80810290506200075585620006fe565b945062000715565b94509492505050565b6000826200077857600190506200084b565b816200078857600090506200084b565b8160018114620007a15760028114620007ac57620007e2565b60019150506200084b565b60ff841115620007c157620007c0620006cf565b5b8360020a915084821115620007db57620007da620006cf565b5b506200084b565b5060208310610133831016604e8410600b84101617156200081c5782820a905083811115620008165762000815620006cf565b5b6200084b565b6200082b84848460016200070b565b92509050818404811115620008455762000844620006cf565b5b81810290505b9392505050565b60006200085f82620002bc565b91506200086c83620002bc565b92506200089b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000766565b905092915050565b6000620008b082620002bc565b9150620008bd83620002bc565b9250828202620008cd81620002bc565b91508282048414831517620008e757620008e6620006cf565b5b5092915050565b61122280620008fe6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063538ba4f911610071578063538ba4f91461016857806370a082311461018657806395d89b41146101b6578063a9059cbb146101d4578063dd62ed3e14610204578063eaf98d2314610234576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610252565b6040516100c39190610c93565b60405180910390f35b6100e660048036038101906100e19190610d4e565b6102e0565b6040516100f39190610da9565b60405180910390f35b6101046103d2565b6040516101119190610dd3565b60405180910390f35b610134600480360381019061012f9190610dee565b6103d8565b6040516101419190610da9565b60405180910390f35b610152610823565b60405161015f9190610e5d565b60405180910390f35b610170610836565b60405161017d9190610e87565b60405180910390f35b6101a0600480360381019061019b9190610ea2565b61083b565b6040516101ad9190610dd3565b60405180910390f35b6101be610853565b6040516101cb9190610c93565b60405180910390f35b6101ee60048036038101906101e99190610d4e565b6108e1565b6040516101fb9190610da9565b60405180910390f35b61021e60048036038101906102199190610ecf565b610bd9565b60405161022b9190610dd3565b60405180910390f35b61023c610bfe565b6040516102499190610dd3565b60405180910390f35b6000805461025f90610f3e565b80601f016020809104026020016040519081016040528092919081815260200182805461028b90610f3e565b80156102d85780601f106102ad576101008083540402835291602001916102d8565b820191906000526020600020905b8154815290600101906020018083116102bb57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103c09190610dd3565b60405180910390a36001905092915050565b60035481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043f90610fbb565b60405180910390fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c190611027565b60405180910390fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058090611093565b60405180910390fd5b60006064600a8461059a91906110e2565b6105a49190611153565b9050600081846105b49190611184565b905083600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106059190611184565b9250508190555080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065b91906111b8565b9250508190555081600460008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106b191906111b8565b9250508190555083600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107449190611184565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107a89190610dd3565b60405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161080e9190610dd3565b60405180910390a36001925050509392505050565b600260009054906101000a900460ff1681565b600081565b60046020528060005260406000206000915090505481565b6001805461086090610f3e565b80601f016020809104026020016040519081016040528092919081815260200182805461088c90610f3e565b80156108d95780601f106108ae576101008083540402835291602001916108d9565b820191906000526020600020905b8154815290600101906020018083116108bc57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094890610fbb565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ca90611027565b60405180910390fd5b60006064600a846109e491906110e2565b6109ee9190611153565b9050600081846109fe9190611184565b905083600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a4f9190611184565b9250508190555080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610aa591906111b8565b9250508190555081600460008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610afb91906111b8565b925050819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b5f9190610dd3565b60405180910390a3600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610bc59190610dd3565b60405180910390a360019250505092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600a81565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c3d578082015181840152602081019050610c22565b60008484015250505050565b6000601f19601f8301169050919050565b6000610c6582610c03565b610c6f8185610c0e565b9350610c7f818560208601610c1f565b610c8881610c49565b840191505092915050565b60006020820190508181036000830152610cad8184610c5a565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ce582610cba565b9050919050565b610cf581610cda565b8114610d0057600080fd5b50565b600081359050610d1281610cec565b92915050565b6000819050919050565b610d2b81610d18565b8114610d3657600080fd5b50565b600081359050610d4881610d22565b92915050565b60008060408385031215610d6557610d64610cb5565b5b6000610d7385828601610d03565b9250506020610d8485828601610d39565b9150509250929050565b60008115159050919050565b610da381610d8e565b82525050565b6000602082019050610dbe6000830184610d9a565b92915050565b610dcd81610d18565b82525050565b6000602082019050610de86000830184610dc4565b92915050565b600080600060608486031215610e0757610e06610cb5565b5b6000610e1586828701610d03565b9350506020610e2686828701610d03565b9250506040610e3786828701610d39565b9150509250925092565b600060ff82169050919050565b610e5781610e41565b82525050565b6000602082019050610e726000830184610e4e565b92915050565b610e8181610cda565b82525050565b6000602082019050610e9c6000830184610e78565b92915050565b600060208284031215610eb857610eb7610cb5565b5b6000610ec684828501610d03565b91505092915050565b60008060408385031215610ee657610ee5610cb5565b5b6000610ef485828601610d03565b9250506020610f0585828601610d03565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f5657607f821691505b602082108103610f6957610f68610f0f565b5b50919050565b7f5472616e7366657220746f20746865207a65726f206164647265737300000000600082015250565b6000610fa5601c83610c0e565b9150610fb082610f6f565b602082019050919050565b60006020820190508181036000830152610fd481610f98565b9050919050565b7f42616c616e6365206e6f7420656e6f7567680000000000000000000000000000600082015250565b6000611011601283610c0e565b915061101c82610fdb565b602082019050919050565b6000602082019050818103600083015261104081611004565b9050919050565b7f4e6f7420416c6c6f776564000000000000000000000000000000000000000000600082015250565b600061107d600b83610c0e565b915061108882611047565b602082019050919050565b600060208201905081810360008301526110ac81611070565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110ed82610d18565b91506110f883610d18565b925082820261110681610d18565b9150828204841483151761111d5761111c6110b3565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061115e82610d18565b915061116983610d18565b92508261117957611178611124565b5b828204905092915050565b600061118f82610d18565b915061119a83610d18565b92508282039050818111156111b2576111b16110b3565b5b92915050565b60006111c382610d18565b91506111ce83610d18565b92508282019050808211156111e6576111e56110b3565b5b9291505056fea26469706673582212205ded2973c8bc1922bf9dd4c940053dd15d0dfa9903cee433e70015c73a65616d64736f6c63430008130033";

type FeeTakingTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeTakingTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeTakingToken__factory extends ContractFactory {
  constructor(...args: FeeTakingTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimals,
      _initialSupply,
      overrides || {}
    );
  }
  override deploy(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _name,
      _symbol,
      _decimals,
      _initialSupply,
      overrides || {}
    ) as Promise<
      FeeTakingToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FeeTakingToken__factory {
    return super.connect(runner) as FeeTakingToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeTakingTokenInterface {
    return new Interface(_abi) as FeeTakingTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FeeTakingToken {
    return new Contract(address, _abi, runner) as unknown as FeeTakingToken;
  }
}
